import Model from './base.js'
import crypto from 'crypto'
import jwt from 'jsonwebtoken'
import logger from '../configs/logger.js'
import axios from 'axios'
import { parseStringPromise } from 'xml2js'
import util from 'node:util'
import objection from 'objection'
import Role from './role.js'

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - eid
 *         - name
 *       properties:
 *         id:
 *           type: integer
 *           description: autogenerated id
 *         eid:
 *           type: string
 *           minLength: 3
 *           maxLength: 20
 *           description: K-State eID of the user
 *         name:
 *           type: string
 *           minLength: 3
 *           maxLength: 255
 *           description: the user's name
 *         roles:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/Role'
 *       example:
 *           id: 1
 *           eid: test-admin
 *           name: Test Administrator
 *           roles:
 *             - id: 1
 *               name: admin
 *
 */

class User extends Model {
  // Table name is the only required property.
  static get tableName() {
    return 'users'
  }

  // Each model must have a column (or a set of columns) that uniquely
  // identifies the rows. The column(s) can be specified using the `idColumn`
  // property. `idColumn` returns `id` by default and doesn't need to be
  // specified unless the model's primary key is something else.
  static get idColumn() {
    return 'id'
  }

  // Methods can be defined for model classes just as you would for
  // any JavaScript class. If you want to include the result of these
  // methods in the output json, see `virtualAttributes`.
  //fullName() {
  //  return this.firstName + ' ' + this.lastName;
  //}
  static async findOrCreate(eid) {
    let user = await User.query().where('eid', eid).limit(1)
    // user not found - create user
    if (user.length === 0) {
      var name = eid
      try {
        logger.debug('Looking up ' + eid + ' in K-State directory')
        const response = await axios.get(
          'https://k-state.edu/People/filter/eid=' + eid
        )
        const jsonstring = await parseStringPromise(response.data)
        for (const result of jsonstring.results.result) {
          if (eid == result.eid) {
            name = result.fn + ' ' + result.ln
            logger.debug('Match Found! ' + name)
            break
          }
        }
      } catch (error) {
        logger.error('Unable to query name from K-State directory!')
        logger.error(util.inspect(error))
      }
      user = [
        await User.query().insert({
          eid: eid,
          name: name,
        }),
      ]
      logger.info('User ' + eid + ' created')
    }
    return user[0]
  }

  static async findByRefreshToken(token) {
    let user = await User.query().where('refresh_token', token).limit(1)
    if (user.length === 0) {
      return null
    }
    return user[0]
  }

  async updateRefreshToken() {
    var token = this.refresh_token
    if (!token) {
      token = crypto.randomBytes(32).toString('hex')
      await this.$query().patch({
        refresh_token: token,
      })
    }
    const refresh_token = jwt.sign(
      {
        refresh_token: token,
      },
      process.env.TOKEN_SECRET,
      {
        expiresIn: '6h',
      }
    )
    return refresh_token
  }

  async get_roles() {
    const roles = await this.$relatedQuery('roles').for(this.id).select('name')
    //Roles for current user
    //console.log(roles)
    // return array of role names
    return roles.map((role) => role.name)
  }

  static async getToken(id) {
    //const refresh_token = await User.updateRefreshToken(id)
    let user = await User.query().findById(id)
    const refresh_token = await user.updateRefreshToken()
    const roles = await user.get_roles()
    const token = jwt.sign(
      {
        user_id: id,
        eid: user.eid,
        roles: roles,
        refresh_token: refresh_token,
      },
      process.env.TOKEN_SECRET,
      {
        expiresIn: '30m',
      }
    )
    return token
  }

  static async clearRefreshToken(id) {
    await User.query().findById(id).patch({
      refresh_token: null,
    })
  }

  // Optional JSON schema. This is not the database schema!
  // No tables or columns are generated based on this. This is only
  // used for input validation. Whenever a model instance is created
  // either explicitly or implicitly it is checked against this schema.
  // See http://json-schema.org/ for more info.
  static get jsonSchema() {
    return {
      type: 'object',
      required: ['eid', 'name'],

      properties: {
        eid: { type: 'string', minLength: 3, maxLength: 20 },
        name: { type: 'string', minLength: 1, maxLength: 255 },
      },
    }
  }

  // This object defines the relations to other models.
  static get relationMappings() {
    // Importing models here is one way to avoid require loops.
      return {
        roles: {
          relation: Model.ManyToManyRelation,
          modelClass: Role,
          join: {
            from: 'users.id',
            // ManyToMany relation needs the `through` object
            // to describe the join table.
            through: {
              // If you have a model class for the join table
              // you need to specify it like this:
              // modelClass: PersonMovie,
              from: 'user_roles.user_id',
              to: 'user_roles.role_id',
            },
            to: 'roles.id',
          },
          filter: (builder) => builder.select('id', 'name'),
        }, 
      }
  }

  async $beforeInsert() {
    let user = await User.query().where('eid', this.eid).limit(1)
    // user not found - create user
    if (user.length !== 0) {
      throw new objection.ValidationError({
        message: 'eid should be unique',
        type: 'ModelValidation',
        data: {
          eid: [
            {
              message: 'this eID is already in use',
            },
          ],
        },
      })
    }
  }
}

export default User
